#<laconf>
  compiler 
  {
     using{ns="NFX.Wave"} 
     using{ns="Agni.WebManager.Controls"} 
     base-class-name="HeadMaster, IProcessManagerPage"
     namespace="Agni.WebManager.Pages"
     abstract="false"
     summary="Process Manager Page"
  }
#</laconf>

#[class]
public ProcessManager(string zone) 
{
  m_Zone = zone;  
}


private string m_Zone;

public string Zone { get {return m_Zone;}}

public override string Title { get { return "Process manager - " + AgniSystem.MetabaseApplicationName + "@" + AgniSystem.HostName;}}

#[override renderDocumentHEAD()]
<style>

    #sectToolbar { 
      font-size: inherit; 
      background: linear-gradient(#ffffff 0%, #d0d0c0 62%, #e0e0e5 78%, #ffffff);
    	border: 1px solid #c0c0c0;
    }
    

    #sectBody {
      padding: 10px;
    }


    #tvTheSystem {
      width: 25%;
      min-width: 200px;
      border: 1px solid #e5e5e5;
      padding: 2px;
      background-color: #f8f8f0;
      font-size: 16px;
      vertical-align: top;
    }

    #lstTheSystem {
      width: 75%;
      min-width: 200px;
      border: 1px solid #e5e5e5;
      padding: 2px;
      vertical-align: top;
      background-color: #f5f5f0;
    }

    #dvList {
      margin-top: 1px;
      flex-direction: row;
      flex-wrap: wrap;
      height: 100%;
    }

      .dvHost {
        width: auto;
        height: auto;
        margin: 2px;
        font-size: 8px;
        cursor: pointer;
      }

      .imgHostGraph {
        border: 1px solid #a0a0a0;
        width: 66px;
        height: 66px;
        margin-left: auto;
        margin-right: auto;
      }

      .imgZoneGraph { width: 130px; }

      .dvHostName { text-align: center; }
      .spnHostName { font-size: 11px; color: #2060ff; }
      .spnHostRole { font-size: 8px; }

      #dvHostDetailsWrapper {
        width: 400px; height: auto;
      }

      #imgHostGraphDlg {
        width: 400px; height: 200px;
      }

      #dvHostNameDlg {
      }

      #spnHostNameDlg {
      }

      #spnHostRoleDlg {
      }

      #dvApps { font-size: 14px; }

      #clsDivConstructed { font-size: 30px; color: #c01010; text-align: center; }

      #dvButtonsDlg {
        margin-left: auto;
        margin-right: auto;
      }

    .wvTreeNode {
      display: table;
      margin-bottom: 3px;
      margin-top: 3px;
    }

    .wvTreeNode_host {
      display: table;
      font-size: 12px;
    }

    .wvTreeNodeButtonExpanded {
      display: table-cell;
      color: rgba(0,0,0,0);
      cursor: pointer;
      padding-left: 20px;
      background: url('?[:SURI.Image("tv.node-minus.24x24.png")]');
      background-size: 17px 17px;
      background-position: 1px 1px;
      background-repeat: no-repeat;
    }

    .wvTreeNodeButtonCollapsed {
      display: table-cell;
      color: rgba(0,0,0,0);
      cursor: pointer;
      padding-left: 20px;
      background: url('?[:SURI.Image("tv.node-plus.24x24.png")]');
      background-size: 19px 19px;
      background-repeat: no-repeat;
    }

    .wvTreeNodeContent {
      display: table-cell;
    }

    .wvTreeNodeOwn {
      display: block;
    }

    .wvTreeNodeOwnSelected {
      display: table;
      background: linear-gradient(0deg, rgba(160, 170, 255, 0.7), rgba(240, 240, 255, 0.9), rgba(160, 170, 255, 0.3));
      font-weight: bold;
    }

    .wvTreeNodeChildren {
      display: block;
      height: auto;
    }

    .tv_reg  { padding-left: 22px; background: url('?[:SURI.Image("Earth.64x64.png")]');  background-size: 20px 20px; background-repeat: no-repeat; }

    .tv_noc  { padding-left: 22px; background: url('?[:SURI.Image("Factory.64x64.png")]'); background-size: 20px 20px; background-repeat: no-repeat;}

    .tv_zone { padding-left: 22px; background: url('?[:SURI.Image("Zone.64x64.png")]'); background-size: 20px 20px; background-repeat: no-repeat;}

    .tv_host { padding-left: 14px; background: url('?[:SURI.Image("Computer.64x64.png")]'); background-size: 12px 12px; background-repeat: no-repeat;}

    .tv_dynamic { padding-left: 14px; background: url('?[:SURI.Image("DynamicComputer.64x64.png")]'); background-size: 12px 12px; background-repeat: no-repeat;}

.clsLogRow {
      display: flex;
      flex-direction: row;
      flex-flow: row;
      flex-wrap: nowrap;
      justify-content: flex-start;
      align-items: center;

      background-color: #f0f0f0;
      border-bottom: 1px dotted #c0c0c0;
      color: #606060;
      font-size: 10px;
      width: 100%;
    }

      .clsLogRow:hover {
        box-shadow: inset 0 0 18px #404040;
        border-radius: 6px;
        position: relative;
        top: -1px; left: -1px;
      }

      .clsLogRow > div {
        display: block;
        margin: 0px;
        padding: 1px;
        word-wrap: break-word;
      }

    .clsLogRow__Debug    { background-color: rgba(040, 255, 180, 0.1); }
    .clsLogRow__Trace    { background-color: rgba(040, 180, 255, 0.1); }
    .clsLogRow__Info     { /*background-color: rgba(120, 255, 040, 0.1);*/ }
    .clsLogRow__Warning  { background-color: rgba(255, 255, 040, 0.1); }
    .clsLogRow__Error    { background-color: rgba(255, 020, 000, 0.3); }
    .clsLogRow__Critical { background-color: rgba(255, 000, 000, 0.5); }

    .clsColMsgID { width: 220px; }
    .clsColMsgTimestamp { width: 70px; text-align: center; }

    .clsColMsgType { width: 60px; margin: 2px !important; margin-right: 4px !important;     border-radius: 4px;   text-align: center; }
    .clsLogRow__Debug .clsColMsgType    { box-shadow: inset 0 0 10px rgba(040, 255, 180, 0.5); }
    .clsLogRow__Trace .clsColMsgType    { box-shadow: inset 0 0 10px rgba(040, 180, 255, 0.5); }
    .clsLogRow__Info .clsColMsgType     { box-shadow: inset 0 0 10px rgba(040, 255, 000, .75); }
    .clsLogRow__Warning .clsColMsgType  { box-shadow: inset 0 0 10px rgba(255, 255, 000, .75); color: black; }
    .clsLogRow__Error .clsColMsgType    { box-shadow: inset 0 0 10px rgba(255, 020, 000, 0.5); color: black; }
    .clsLogRow__Critical .clsColMsgType { box-shadow: inset 0 0 10px rgba(255, 000, 000, 0.5); color: yellow; }

    .clsColMsgHost { width: 180px; }
    .clsColMsgTopic { width: 120px; }

    .clsColMsgFrom { width: 250px; }
    .clsColMsgSrc { width: 32px; }

    .clsColMsgText { width: 1000px; }
    .clsLogRow__Error .clsColMsgText    { color: black; }
    .clsLogRow__Critical .clsColMsgText { color: black; }

    .clsRelated { color: #70a0ff; }
    
    .clsDvPresets {
     
      background-color: #f0f8f0;
      padding: 2px;
    }
    
    .clsDvPresets label {
      display: none;
    }
    .clsDvPresets textarea {
      width: 300px; height: 200px;
    }
    
    
    #dvButtonDlg {
      margin-left: auto;
      margin-right: auto;
      padding: 4px;
      width: intrinsic;           /* Safari/WebKit uses a non-standard name */
      width: -moz-max-content;    /* Firefox/Gecko */
      width: -webkit-max-content; /* Chrome */
    }

      #dvButtonDlg button { display: inline; }

    .clsDvPresetItem {
      background-color: #eeeeee;
      border-radius: 3px;
      box-shadow: 0 0 2px #aaaaaa inset;
      margin: 2px;
      padding: 3px;
    }

    .clsDvPresetItemName { font-size: 15px; cursor: pointer; margin-left: 3px; margin-right: 3px; }

    .clsDvPresetItemRemove { font-size: 12px; cursor: pointer; color: #2222cc; }

  </style>


#[override renderDocumentBODY()]
 <section id="sectToolbar">
      <div id="divLogo"></div>
      <div style="display: table-row">
        <div style="display: table-cell">
          <span id="spnAppName">?[AgniSystem.MetabaseApplicationName]</span>@?[AgniSystem.HostName]
        </div>
        <div style="display: table-cell">
          &nbsp;
        </div>
        <div id="dvFromType" style="display: table-cell;">
          &nbsp;
        </div>
        <div id="divRec" style="display: table-cell">
          <img id="imgAntenna" src="?[:SURI.Image("Antenna.ERROR.gif")]" >
        </div>
        <form data-wv-rid="V1">
        <div style="display: table-cell" class="fView clsDvPresets" data-wv-fname="filterSignal"></div>
        <div style="display: table-cell" class="fView" data-wv-fname="StartDate"></div>
        <div style="display: table-cell" class="fView" data-wv-fname="EndDate"></div>
        <div style="display: table-cell" class="fView" data-wv-fname="Description"></div>
        </form>
      </div>
    </section>

<table style="width: 100%">
    <tr>
      <td id="lstTheSystem">
        <div>
          <div id="dvList">
          </div>
        </div>
      </td>
    </tr>
  </table>


<script>

var REC = null;
var RVIEW = null;
REC = new WAVE.RecordModel.Record({
  ID:'R1',
  fields:[
    {def: {Name:'StartDate', Type:'date',  Kind: WAVE.RecordModel.KIND_DATETIME}},
    {def: {Name:'EndDate', Type:'date',  Kind: WAVE.RecordModel.KIND_DATETIME}},
    {def: {Name:'Description', Type:'string',}},
    {def: {Name: 'filterSignal', Type: 'string', Case: WAVE.RecordModel.CASE_ASIS,
           LookupDict: {Created: "Created",
                        Started: "Started",
                        Finished: "Finished",
                        Canceled: "Canceled",
                        Terminated: "Terminated",
                        Failed: "Failed"}}}
  ]
});

RVIEW = new WAVE.RecordModel.RecordView("V1", REC);
 
var zone = "?[Zone]";

function TheSystemList(zone) {
  var fZone = zone,
      fScheduleTimer,
      fTick = 1000,
      fDefaultTick = 1000,
      fFilter={}, 
      fPIDs = [];
  
  this.showLevel = function () {
    scheduleFetch();
  };
  
  function refreshList(zone) {
    fFilter['zone'] = escape(fZone);
    fFilter['signal'] = REC.data().filterSignal;
    fFilter['startDate'] = REC.data().StartDate;
    fFilter['endDate'] = REC.data().EndDate;
    fFilter['description'] = REC.data().Description;
    
    var link =  "mvc/ProcessManager/List";
    WAVE.ajaxCall(
      'POST',
      link,
      fFilter,
      function(resp) { processList(JSON.parse(resp)) },
      function(resp) {console.log(resp); WAVE.id("imgAntenna").src = '?[:SURI.Image("Antenna.ERROR.gif")]'; fTick = 2*fTick;},
      function(resp) {console.log(resp); WAVE.id("imgAntenna").src = '?[:SURI.Image("Antenna.ERROR.gif")]'; fTick = 2*fTick;},
      WAVE.CONTENT_TYPE_JSON_UTF8,
      WAVE.CONTENT_TYPE_JSON_UTF8    
    );
  }
  
  this.setFilter = function(newFilter) {
    fFilter = newFilter;
  }
  
  this.getFilter = new function() {
    return fFilter;
  }
  
  this.deatils = function(i) {
    var data = {pid : fPIDs[i]};
    var link = "mvc/ProcessManager/GetDetails";
    WAVE.ajaxCall(
      'POST',
      link,
      data,
      function (resp) {
        debugger;
        console.log(resp);
        var message = JSON.parse(resp);
        viewDetails(message, fPIDs[i]);
      },
      function(resp) {console.log(resp)},
      function(resp) {console.log(resp)},
      WAVE.CONTENT_TYPE_JSON_UTF8,
      WAVE.CONTENT_TYPE_JSON_UTF8    
    );
  }
  
  this.cancelProc = function(i) {
    var link = "mvc/ProcessManager/SendCancel";
    WAVE.ajaxCall(
      'POST',
      link,
      fPIDs[i],
      function (resp) {
        refreshList(fZone);
      },
      function(resp) {console.log(resp)},
      function(resp) {console.log(resp)},
      WAVE.CONTENT_TYPE_JSON_UTF8,
      WAVE.CONTENT_TYPE_JSON_UTF8    
    );
  }
  
  this.terminateProc = function(i) {
      var link = "mvc/ProcessManager/SendTerminate";
      WAVE.ajaxCall(
        'POST',
        link,
        fPIDs[i],
        function (resp) {
          refreshList(fZone);
        },
        function(resp) {console.log(resp);},
        function(resp) {console.log(resp);},
        WAVE.CONTENT_TYPE_JSON_UTF8,
        WAVE.CONTENT_TYPE_JSON_UTF8    
      );
    }
    
  this.editSignal = function (i) {
    var DLG_TEMPLATE = '<div data-wv-rid="V3">' +
                       '<div id="dvDlgContent" data-wv-fname="Signal" data-wv-ctl="textarea" class="fView clsDvPresets"></div>' +
                       '<div id="dvButtonDlg">' +
                       '  <button class="uiCentered uiButton" id="btnDlgPresetsSave" onclick="WAVE.GUI.currentDialog().ok()">Send</button>' +
                       '  <button class="uiCentered uiButton" id="btnDlgPresetsClose" onclick="WAVE.GUI.currentDialog().cancel();">Close</button>' +
                       '</div>'+
                       '</div>'
                       ;
  
    var rec = new WAVE.RecordModel.Record(
          {
            ID: "V3",
            fields: [
              {def: {Name: 'Signal', Type: 'string', Size: 512, Required: false, Placeholder: ''}, val: ""},
            ]
          }
        );
    var content = WAVE.strTemplate(DLG_TEMPLATE, {});
  
    var dlg = new WAVE.GUI.Dialog({ 
      header: 'Signal', 
      body: content,
      onShow: function () {
        var rv = new WAVE.RecordModel.RecordView("V3", rec);
      },
      onClose: function (dlg, result) {
        if (result == WAVE.GUI.DLG_CANCEL) return WAVE.GUI.DLG_CANCEL;
        rec.validate();
        if (!rec.valid()) return WAVE.GUI.DLG_UNDEFINED;
        sendSignal(i, rec.data().Signal)
        return WAVE.GUI.DLG_CANCEL;
      }
    
    });
  }
  
  function viewDetails(message, pid) {
    var DLG_TEMPLATE = WAVE.strHTMLTemplate("<div>@Zone@:@ID@:@ProcessorID@</div>", pid);
     DLG_TEMPLATE += "<div>";
    var keys = Object.keys(message)
    for(i=0, l=keys.length; i < l; i++) {
      DLG_TEMPLATE += "<div>"+keys[i]+" : "+message[keys[i]]+"</div>"
    }
     DLG_TEMPLATE += "</div>";
    
    DLG_TEMPLATE += "<div id='dvButtonDlg'><button class='uiCentered uiButton' id='btnDlgPresetsClose' onclick='WAVE.GUI.currentDialog().cancel();'>Close</button></div>";
    var dlg = new WAVE.GUI.Dialog({
      header:'Details',
      body: DLG_TEMPLATE
    });      
  }
 
  function sendSignal(i, Signal) {
    var data = {PID : fPIDs[i], signal : Signal}
    var link = "mvc/ProcessManager/SendSignal";
    WAVE.ajaxCall(
      'POST',
      link,
      data,
      function (resp) {
        var status = JSON.parse(resp);
        if (status.Status === 'Error') {
           WAVE.GUI.toast("Something went wrong, see console for details");
           console.log(status.Exception);
        } else {
          refreshList(fZone);
        }
      },
      function(resp) {console.log(resp)},
      function(resp) {console.log(resp)},
      WAVE.CONTENT_TYPE_JSON_UTF8,
      WAVE.CONTENT_TYPE_JSON_UTF8 
    );

  }
  
  function processList (data) {
    $('#dvList').empty();
    if (data.Status=="OK") {
      fTick = fDefaultTick;
      WAVE.id("imgAntenna").src = '?[:SURI.Image("Antenna.OK.gif")]';
      var list = JSON.parse(data.Result);
      fPIDs = [];
      for(var i =0, l = list.length; i < l ; i++) {
        var item = list[i];
        var pid = item.PID;
        fPIDs[i] = pid;
        var unique = pid.IsUnique ? 'Unquie' : 'Not unique';
        pid.Unique = unique;
        var colorClass = item.Status === 'Canceled' || item.Status === 'Terminated' ? 'clsLogRow__Error' : 'clsLogRow__Info';
        var str = '<div class="clsLogRow '+colorClass+'" ondblclick="listProcesses.deatils('+i+')">';
        str += "<div class='clsColMsgFrom'>"
            +  "<button class='uiButton' onClick='listProcesses.cancelProc("+i+")' value='Cancel'>Cancel</button>" 
            +  "<button class='uiButton' onClick='listProcesses.terminateProc("+i+")' value='Treminate'>Terminate</button>" 
            +  "<button class='uiButton' onClick='listProcesses.editSignal("+i+")' value='Send signal'>Send signal</button>" 
            + "</div>"
            + WAVE.strHTMLTemplate("<div class='clsColMsgID'>@Zone@:@ID@:@ProcessorID@</div>"
            +  "<div class='clsColMsgSrc'>@Unique@</div> ", pid)
            +  WAVE.strHTMLTemplate("<div class='clsColMsgTopic'> @Description@</div>"
            +  "<div class='clsColMsgTimestamp'>@Timestamp@</div>"
            +  "<div class='clsColMsgFrom'>@About@</div>"
            +  "<div class='clsColMsgType'>@Status@</div>"
            +  "<div class='clsColMsgTopic'>@StatusDescription@</div>"
            +  "<div class='clsColMsgTimestamp'>@StatusTimestamp@</div>"
            +  "<div class='clsColMsgFrom'>@StatusAbout@</div> ", item);
        str += '</div>';
        $( "#dvList" ).append(str);
      }
    } else {
      debugger;
      WAVE.id("imgAntenna").src = '?[:SURI.Image("Antenna.ERROR.gif")]';
      $( "#dvList" ).append( WAVE.strHTMLTemplate("<div class='conForeColor_Red'>@Exception@</div>", data) );
    }    
  }

  function scheduleFetch() {
    if (fScheduleTimer) clearTimeout(fScheduleTimer);
    refreshList(fZone);
    fScheduleTimer = setTimeout(scheduleFetch, fTick);
  }

}//TheSystemList

var listProcesses = new TheSystemList(zone);

listProcesses.showLevel();  

</script>