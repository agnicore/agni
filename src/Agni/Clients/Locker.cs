//Generated by Agni.Clients.Tools.AgniGluecCompiler

/* Auto generated by Glue Client Compiler tool (gluec)
on 8/14/2016 20:08:43 at MIGHTY by opana
Do not modify this file by hand if you plan to regenerate this file again by the tool as manual changes will be lost
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;

using NFX.Glue;
using NFX.Glue.Protocol;


namespace Agni.Clients
{
// This implementation needs @Agni.@Contracts.@ILockerClient, so
// it can be used with ServiceClientHub class

  ///<summary>
  /// Client for glued contract Agni.Contracts.ILocker server.
  /// Each contract method has synchronous and asynchronous versions, the later denoted by 'Async_' prefix.
  /// May inject client-level inspectors here like so:
  ///   client.MsgInspectors.Register( new YOUR_CLIENT_INSPECTOR_TYPE());
  ///</summary>
  public class Locker : ClientEndPoint, @Agni.@Contracts.@ILockerClient
  {

  #region Static Members

     private static TypeSpec s_ts_CONTRACT;
     private static MethodSpec @s_ms_ExecuteLockTransaction_0;
     private static MethodSpec @s_ms_EndLockSession_1;

     //static .ctor
     static Locker()
     {
         var t = typeof(@Agni.@Contracts.@ILocker);
         s_ts_CONTRACT = new TypeSpec(t);
         @s_ms_ExecuteLockTransaction_0 = new MethodSpec(t.GetMethod("ExecuteLockTransaction", new Type[]{ typeof(@Agni.@Locking.@Server.@LockSessionData), typeof(@Agni.@Locking.@LockTransaction) }));
         @s_ms_EndLockSession_1 = new MethodSpec(t.GetMethod("EndLockSession", new Type[]{ typeof(@Agni.@Locking.@LockSessionID) }));
     }
  #endregion

  #region .ctor
     public Locker(string node, Binding binding = null) : base(node, binding) { ctor(); }
     public Locker(Node node, Binding binding = null) : base(node, binding) { ctor(); }
     public Locker(IGlue glue, string node, Binding binding = null) : base(glue, node, binding) { ctor(); }
     public Locker(IGlue glue, Node node, Binding binding = null) : base(glue, node, binding) { ctor(); }

     //common instance .ctor body
     private void ctor()
     {

     }

  #endregion

     public override Type Contract
     {
       get { return typeof(@Agni.@Contracts.@ILocker); }
     }



  #region Contract Methods

         ///<summary>
         /// Synchronous invoker for  'Agni.Contracts.ILocker.ExecuteLockTransaction'.
         /// This is a two-way call per contract specification, meaning - the server sends the result back either
         ///  returning '@Agni.@Locking.@LockTransactionResult' or WrappedExceptionData instance.
         /// ClientCallException is thrown if the call could not be placed in the outgoing queue.
         /// RemoteException is thrown if the server generated exception during method execution.
         ///</summary>
         public @Agni.@Locking.@LockTransactionResult @ExecuteLockTransaction(@Agni.@Locking.@Server.@LockSessionData  @session, @Agni.@Locking.@LockTransaction  @transaction)
         {
            var call = Async_ExecuteLockTransaction(@session, @transaction);
            return call.GetValue<@Agni.@Locking.@LockTransactionResult>();
         }

         ///<summary>
         /// Asynchronous invoker for  'Agni.Contracts.ILocker.ExecuteLockTransaction'.
         /// This is a two-way call per contract specification, meaning - the server sends the result back either
         ///  returning no exception or WrappedExceptionData instance.
         /// CallSlot is returned that can be queried for CallStatus, ResponseMsg and result.
         ///</summary>
         public CallSlot Async_ExecuteLockTransaction(@Agni.@Locking.@Server.@LockSessionData  @session, @Agni.@Locking.@LockTransaction  @transaction)
         {
            var request = new RequestAnyMsg(s_ts_CONTRACT, @s_ms_ExecuteLockTransaction_0, false, RemoteInstance, new object[]{@session, @transaction});
            return DispatchCall(request);
         }



         ///<summary>
         /// Synchronous invoker for  'Agni.Contracts.ILocker.EndLockSession'.
         /// This is a two-way call per contract specification, meaning - the server sends the result back either
         ///  returning '@System.@Boolean' or WrappedExceptionData instance.
         /// ClientCallException is thrown if the call could not be placed in the outgoing queue.
         /// RemoteException is thrown if the server generated exception during method execution.
         ///</summary>
         public @System.@Boolean @EndLockSession(@Agni.@Locking.@LockSessionID  @sessionID)
         {
            var call = Async_EndLockSession(@sessionID);
            return call.GetValue<@System.@Boolean>();
         }

         ///<summary>
         /// Asynchronous invoker for  'Agni.Contracts.ILocker.EndLockSession'.
         /// This is a two-way call per contract specification, meaning - the server sends the result back either
         ///  returning no exception or WrappedExceptionData instance.
         /// CallSlot is returned that can be queried for CallStatus, ResponseMsg and result.
         ///</summary>
         public CallSlot Async_EndLockSession(@Agni.@Locking.@LockSessionID  @sessionID)
         {
            var request = new RequestAnyMsg(s_ts_CONTRACT, @s_ms_EndLockSession_1, false, RemoteInstance, new object[]{@sessionID});
            return DispatchCall(request);
         }


  #endregion

  }//class
}//namespace
