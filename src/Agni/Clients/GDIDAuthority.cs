//Generated by Agni.Clients.Tools.AgniGluecCompiler

/* Auto generated by Glue Client Compiler tool (gluec)
on 2/18/2015 8:21:59 PM at SEXTOD by Anton
Do not modify this file by hand if you plan to regenerate this file again by the tool as manual changes will be lost
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;

using NFX.Glue;
using NFX.Glue.Protocol;


namespace Agni.Clients
{
// This implementation needs @Agni.@Contracts.@IGDIDAuthorityClient, so
// it can be used with ServiceClientHub class

  ///<summary>
  /// Client for glued contract Agni.Contracts.IGDIDAuthority server.
  /// Each contract method has synchronous and asynchronous versions, the later denoted by 'Async_' prefix.
  /// May inject client-level inspectors here like so:
  ///   client.MsgInspectors.Register( new YOUR_CLIENT_INSPECTOR_TYPE());
  ///</summary>
  public class GDIDAuthority : ClientEndPoint, @Agni.@Contracts.@IGDIDAuthorityClient
  {

  #region Static Members

     private static TypeSpec s_ts_CONTRACT;
     private static MethodSpec @s_ms_AllocateBlock_0;

     //static .ctor
     static GDIDAuthority()
     {
         var t = typeof(@Agni.@Contracts.@IGDIDAuthority);
         s_ts_CONTRACT = new TypeSpec(t);
         @s_ms_AllocateBlock_0 = new MethodSpec(t.GetMethod("AllocateBlock", new Type[]{ typeof(@System.@String), typeof(@System.@String), typeof(@System.@Int32), typeof(@System.@Nullable<@System.@UInt64>) }));
     }
  #endregion

  #region .ctor
     public GDIDAuthority(string node, Binding binding = null) : base(node, binding) { ctor(); }
     public GDIDAuthority(Node node, Binding binding = null) : base(node, binding) { ctor(); }
     public GDIDAuthority(IGlue glue, string node, Binding binding = null) : base(glue, node, binding) { ctor(); }
     public GDIDAuthority(IGlue glue, Node node, Binding binding = null) : base(glue, node, binding) { ctor(); }

     //common instance .ctor body
     private void ctor()
     {

     }

  #endregion

     public override Type Contract
     {
       get { return typeof(@Agni.@Contracts.@IGDIDAuthority); }
     }



  #region Contract Methods

         ///<summary>
         /// Synchronous invoker for  'Agni.Contracts.IGDIDAuthority.AllocateBlock'.
         /// This is a two-way call per contract specification, meaning - the server sends the result back either
         ///  returning '@Agni.@Contracts.@GDIDBlock' or WrappedExceptionData instance.
         /// ClientCallException is thrown if the call could not be placed in the outgoing queue.
         /// RemoteException is thrown if the server generated exception during method execution.
         ///</summary>
         public @Agni.@Contracts.@GDIDBlock @AllocateBlock(@System.@String  @scopeName, @System.@String  @sequenceName, @System.@Int32  @blockSize, @System.@Nullable<@System.@UInt64>  @vicinity)
         {
            var call = Async_AllocateBlock(@scopeName, @sequenceName, @blockSize, @vicinity);
            return call.GetValue<@Agni.@Contracts.@GDIDBlock>();
         }

         ///<summary>
         /// Asynchronous invoker for  'Agni.Contracts.IGDIDAuthority.AllocateBlock'.
         /// This is a two-way call per contract specification, meaning - the server sends the result back either
         ///  returning no exception or WrappedExceptionData instance.
         /// CallSlot is returned that can be queried for CallStatus, ResponseMsg and result.
         ///</summary>
         public CallSlot Async_AllocateBlock(@System.@String  @scopeName, @System.@String  @sequenceName, @System.@Int32  @blockSize, @System.@Nullable<@System.@UInt64>  @vicinity)
         {
            var request = new RequestAnyMsg(s_ts_CONTRACT, @s_ms_AllocateBlock_0, false, RemoteInstance, new object[]{@scopeName, @sequenceName, @blockSize, @vicinity});
            return DispatchCall(request);
         }


  #endregion

  }//class
}//namespace
