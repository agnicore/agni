//Generated by Agni.Clients.Tools.AgniGluecCompiler

/* Auto generated by Glue Client Compiler tool (gluec)
on 6/1/2017 8:48:15 PM at CNONIM-PC by cnonim
Do not modify this file by hand if you plan to regenerate this file again by the tool as manual changes will be lost
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;

using NFX.Glue;
using NFX.Glue.Protocol;


namespace Agni.Clients
{
// This implementation needs @Agni.@Contracts.@ILogReceiverClient, so
// it can be used with ServiceClientHub class

  ///<summary>
  /// Client for glued contract Agni.Contracts.ILogReceiver server.
  /// Each contract method has synchronous and asynchronous versions, the later denoted by 'Async_' prefix.
  /// May inject client-level inspectors here like so:
  ///   client.MsgInspectors.Register( new YOUR_CLIENT_INSPECTOR_TYPE());
  ///</summary>
  public class LogReceiver : ClientEndPoint, @Agni.@Contracts.@ILogReceiverClient
  {

  #region Static Members

     private static TypeSpec s_ts_CONTRACT;
     private static MethodSpec @s_ms_SendLog_0;
     private static MethodSpec @s_ms_GetByID_1;
     private static MethodSpec @s_ms_List_2;

     //static .ctor
     static LogReceiver()
     {
         var t = typeof(@Agni.@Contracts.@ILogReceiver);
         s_ts_CONTRACT = new TypeSpec(t);
         @s_ms_SendLog_0 = new MethodSpec(t.GetMethod("SendLog", new Type[]{ typeof(@NFX.@Log.@Message) }));
         @s_ms_GetByID_1 = new MethodSpec(t.GetMethod("GetByID", new Type[]{ typeof(@System.@Guid), typeof(@System.@String) }));
         @s_ms_List_2 = new MethodSpec(t.GetMethod("List", new Type[]{ typeof(@System.@String), typeof(@System.@DateTime), typeof(@System.@DateTime), typeof(@System.@Nullable<@NFX.@Log.@MessageType>), typeof(@System.@String), typeof(@System.@String), typeof(@System.@String), typeof(@System.@Nullable<@System.@Guid>), typeof(@System.@Int32) }));
     }
  #endregion

  #region .ctor
     public LogReceiver(string node, Binding binding = null) : base(node, binding) { ctor(); }
     public LogReceiver(Node node, Binding binding = null) : base(node, binding) { ctor(); }
     public LogReceiver(IGlue glue, string node, Binding binding = null) : base(glue, node, binding) { ctor(); }
     public LogReceiver(IGlue glue, Node node, Binding binding = null) : base(glue, node, binding) { ctor(); }

     //common instance .ctor body
     private void ctor()
     {

     }

  #endregion

     public override Type Contract
     {
       get { return typeof(@Agni.@Contracts.@ILogReceiver); }
     }



  #region Contract Methods

         ///<summary>
         /// Synchronous invoker for  'Agni.Contracts.ILogReceiver.SendLog'.
         /// This is a one-way call per contract specification, meaning - the server sends no acknowledgement of this call receipt and
         /// there is no result that server could return back to the caller.
         /// ClientCallException is thrown if the call could not be placed in the outgoing queue.
         ///</summary>
         public void @SendLog(@NFX.@Log.@Message  @data)
         {
            var call = Async_SendLog(@data);
            if (call.CallStatus != CallStatus.Dispatched)
                throw new ClientCallException(call.CallStatus, "Call failed: 'LogReceiver.SendLog'");
         }

         ///<summary>
         /// Asynchronous invoker for  'Agni.Contracts.ILogReceiver.SendLog'.
         /// This is a one-way call per contract specification, meaning - the server sends no acknowledgement of this call receipt and
         /// there is no result that server could return back to the caller.
         /// CallSlot is returned that can be queried for CallStatus, ResponseMsg.
         ///</summary>
         public CallSlot Async_SendLog(@NFX.@Log.@Message  @data)
         {
            var request = new @Agni.@Contracts.@RequestMsg_ILogReceiver_SendLog(s_ts_CONTRACT, @s_ms_SendLog_0, true, RemoteInstance)
            {
               MethodArg_0_data = @data,
            };
            return DispatchCall(request);
         }



         ///<summary>
         /// Synchronous invoker for  'Agni.Contracts.ILogReceiver.GetByID'.
         /// This is a two-way call per contract specification, meaning - the server sends the result back either
         ///  returning '@NFX.@Log.@Message' or WrappedExceptionData instance.
         /// ClientCallException is thrown if the call could not be placed in the outgoing queue.
         /// RemoteException is thrown if the server generated exception during method execution.
         ///</summary>
         public @NFX.@Log.@Message @GetByID(@System.@Guid  @id, @System.@String  @channel)
         {
            var call = Async_GetByID(@id, @channel);
            return call.GetValue<@NFX.@Log.@Message>();
         }

         ///<summary>
         /// Asynchronous invoker for  'Agni.Contracts.ILogReceiver.GetByID'.
         /// This is a two-way call per contract specification, meaning - the server sends the result back either
         ///  returning no exception or WrappedExceptionData instance.
         /// CallSlot is returned that can be queried for CallStatus, ResponseMsg and result.
         ///</summary>
         public CallSlot Async_GetByID(@System.@Guid  @id, @System.@String  @channel)
         {
            var request = new RequestAnyMsg(s_ts_CONTRACT, @s_ms_GetByID_1, false, RemoteInstance, new object[]{@id, @channel});
            return DispatchCall(request);
         }



         ///<summary>
         /// Synchronous invoker for  'Agni.Contracts.ILogReceiver.List'.
         /// This is a two-way call per contract specification, meaning - the server sends the result back either
         ///  returning '@System.@Collections.@Generic.@IEnumerable<@NFX.@Log.@Message>' or WrappedExceptionData instance.
         /// ClientCallException is thrown if the call could not be placed in the outgoing queue.
         /// RemoteException is thrown if the server generated exception during method execution.
         ///</summary>
         public @System.@Collections.@Generic.@IEnumerable<@NFX.@Log.@Message> @List(@System.@String  @archiveDimensionsFilter, @System.@DateTime  @startDate, @System.@DateTime  @endDate, @System.@Nullable<@NFX.@Log.@MessageType>  @type, @System.@String  @host, @System.@String  @channel, @System.@String  @topic, @System.@Nullable<@System.@Guid>  @relatedTo, @System.@Int32  @skipCount)
         {
            var call = Async_List(@archiveDimensionsFilter, @startDate, @endDate, @type, @host, @channel, @topic, @relatedTo, @skipCount);
            return call.GetValue<@System.@Collections.@Generic.@IEnumerable<@NFX.@Log.@Message>>();
         }

         ///<summary>
         /// Asynchronous invoker for  'Agni.Contracts.ILogReceiver.List'.
         /// This is a two-way call per contract specification, meaning - the server sends the result back either
         ///  returning no exception or WrappedExceptionData instance.
         /// CallSlot is returned that can be queried for CallStatus, ResponseMsg and result.
         ///</summary>
         public CallSlot Async_List(@System.@String  @archiveDimensionsFilter, @System.@DateTime  @startDate, @System.@DateTime  @endDate, @System.@Nullable<@NFX.@Log.@MessageType>  @type, @System.@String  @host, @System.@String  @channel, @System.@String  @topic, @System.@Nullable<@System.@Guid>  @relatedTo, @System.@Int32  @skipCount)
         {
            var request = new RequestAnyMsg(s_ts_CONTRACT, @s_ms_List_2, false, RemoteInstance, new object[]{@archiveDimensionsFilter, @startDate, @endDate, @type, @host, @channel, @topic, @relatedTo, @skipCount});
            return DispatchCall(request);
         }


  #endregion

  }//class
}//namespace
