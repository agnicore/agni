//Generated by Agni.Clients.Tools.AgniGluecCompiler

/* Auto generated by Glue Client Compiler tool (gluec)
on 5/19/2017 8:47:54 PM at CNONIM-PC by cnonim
Do not modify this file by hand if you plan to regenerate this file again by the tool as manual changes will be lost
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;

using NFX.Glue;
using NFX.Glue.Protocol;


namespace Agni.Clients
{
// This implementation needs @Agni.@Contracts.@IProcessControllerClient, so
// it can be used with ServiceClientHub class

  ///<summary>
  /// Client for glued contract Agni.Contracts.IProcessController server.
  /// Each contract method has synchronous and asynchronous versions, the later denoted by 'Async_' prefix.
  /// May inject client-level inspectors here like so:
  ///   client.MsgInspectors.Register( new YOUR_CLIENT_INSPECTOR_TYPE());
  ///</summary>
  public class ProcessController : ClientEndPoint, @Agni.@Contracts.@IProcessControllerClient
  {

  #region Static Members

     private static TypeSpec s_ts_CONTRACT;
     private static MethodSpec @s_ms_Spawn_0;
     private static MethodSpec @s_ms_Dispatch_1;
     private static MethodSpec @s_ms_Get_2;
     private static MethodSpec @s_ms_GetDescriptor_3;
     private static MethodSpec @s_ms_List_4;

     //static .ctor
     static ProcessController()
     {
         var t = typeof(@Agni.@Contracts.@IProcessController);
         s_ts_CONTRACT = new TypeSpec(t);
         @s_ms_Spawn_0 = new MethodSpec(t.GetMethod("Spawn", new Type[]{ typeof(@Agni.@Workers.@ProcessFrame) }));
         @s_ms_Dispatch_1 = new MethodSpec(t.GetMethod("Dispatch", new Type[]{ typeof(@Agni.@Workers.@SignalFrame) }));
         @s_ms_Get_2 = new MethodSpec(t.GetMethod("Get", new Type[]{ typeof(@Agni.@Workers.@PID) }));
         @s_ms_GetDescriptor_3 = new MethodSpec(t.GetMethod("GetDescriptor", new Type[]{ typeof(@Agni.@Workers.@PID) }));
         @s_ms_List_4 = new MethodSpec(t.GetMethod("List", new Type[]{ typeof(@System.@Int32) }));
     }
  #endregion

  #region .ctor
     public ProcessController(string node, Binding binding = null) : base(node, binding) { ctor(); }
     public ProcessController(Node node, Binding binding = null) : base(node, binding) { ctor(); }
     public ProcessController(IGlue glue, string node, Binding binding = null) : base(glue, node, binding) { ctor(); }
     public ProcessController(IGlue glue, Node node, Binding binding = null) : base(glue, node, binding) { ctor(); }

     //common instance .ctor body
     private void ctor()
     {

     }

  #endregion

     public override Type Contract
     {
       get { return typeof(@Agni.@Contracts.@IProcessController); }
     }



  #region Contract Methods

         ///<summary>
         /// Synchronous invoker for  'Agni.Contracts.IProcessController.Spawn'.
         /// This is a two-way call per contract specification, meaning - the server sends the result back either
         ///  returning no exception or WrappedExceptionData instance.
         /// ClientCallException is thrown if the call could not be placed in the outgoing queue.
         /// RemoteException is thrown if the server generated exception during method execution.
         ///</summary>
         public void @Spawn(@Agni.@Workers.@ProcessFrame  @frame)
         {
            var call = Async_Spawn(@frame);
            call.CheckVoidValue();
         }

         ///<summary>
         /// Asynchronous invoker for  'Agni.Contracts.IProcessController.Spawn'.
         /// This is a two-way call per contract specification, meaning - the server sends the result back either
         ///  returning no exception or WrappedExceptionData instance.
         /// CallSlot is returned that can be queried for CallStatus, ResponseMsg and result.
         ///</summary>
         public CallSlot Async_Spawn(@Agni.@Workers.@ProcessFrame  @frame)
         {
            var request = new RequestAnyMsg(s_ts_CONTRACT, @s_ms_Spawn_0, false, RemoteInstance, new object[]{@frame});
            return DispatchCall(request);
         }



         ///<summary>
         /// Synchronous invoker for  'Agni.Contracts.IProcessController.Dispatch'.
         /// This is a two-way call per contract specification, meaning - the server sends the result back either
         ///  returning '@Agni.@Workers.@SignalFrame' or WrappedExceptionData instance.
         /// ClientCallException is thrown if the call could not be placed in the outgoing queue.
         /// RemoteException is thrown if the server generated exception during method execution.
         ///</summary>
         public @Agni.@Workers.@SignalFrame @Dispatch(@Agni.@Workers.@SignalFrame  @signal)
         {
            var call = Async_Dispatch(@signal);
            return call.GetValue<@Agni.@Workers.@SignalFrame>();
         }

         ///<summary>
         /// Asynchronous invoker for  'Agni.Contracts.IProcessController.Dispatch'.
         /// This is a two-way call per contract specification, meaning - the server sends the result back either
         ///  returning no exception or WrappedExceptionData instance.
         /// CallSlot is returned that can be queried for CallStatus, ResponseMsg and result.
         ///</summary>
         public CallSlot Async_Dispatch(@Agni.@Workers.@SignalFrame  @signal)
         {
            var request = new RequestAnyMsg(s_ts_CONTRACT, @s_ms_Dispatch_1, false, RemoteInstance, new object[]{@signal});
            return DispatchCall(request);
         }



         ///<summary>
         /// Synchronous invoker for  'Agni.Contracts.IProcessController.Get'.
         /// This is a two-way call per contract specification, meaning - the server sends the result back either
         ///  returning '@Agni.@Workers.@ProcessFrame' or WrappedExceptionData instance.
         /// ClientCallException is thrown if the call could not be placed in the outgoing queue.
         /// RemoteException is thrown if the server generated exception during method execution.
         ///</summary>
         public @Agni.@Workers.@ProcessFrame @Get(@Agni.@Workers.@PID  @pid)
         {
            var call = Async_Get(@pid);
            return call.GetValue<@Agni.@Workers.@ProcessFrame>();
         }

         ///<summary>
         /// Asynchronous invoker for  'Agni.Contracts.IProcessController.Get'.
         /// This is a two-way call per contract specification, meaning - the server sends the result back either
         ///  returning no exception or WrappedExceptionData instance.
         /// CallSlot is returned that can be queried for CallStatus, ResponseMsg and result.
         ///</summary>
         public CallSlot Async_Get(@Agni.@Workers.@PID  @pid)
         {
            var request = new RequestAnyMsg(s_ts_CONTRACT, @s_ms_Get_2, false, RemoteInstance, new object[]{@pid});
            return DispatchCall(request);
         }



         ///<summary>
         /// Synchronous invoker for  'Agni.Contracts.IProcessController.GetDescriptor'.
         /// This is a two-way call per contract specification, meaning - the server sends the result back either
         ///  returning '@Agni.@Workers.@ProcessDescriptor' or WrappedExceptionData instance.
         /// ClientCallException is thrown if the call could not be placed in the outgoing queue.
         /// RemoteException is thrown if the server generated exception during method execution.
         ///</summary>
         public @Agni.@Workers.@ProcessDescriptor @GetDescriptor(@Agni.@Workers.@PID  @pid)
         {
            var call = Async_GetDescriptor(@pid);
            return call.GetValue<@Agni.@Workers.@ProcessDescriptor>();
         }

         ///<summary>
         /// Asynchronous invoker for  'Agni.Contracts.IProcessController.GetDescriptor'.
         /// This is a two-way call per contract specification, meaning - the server sends the result back either
         ///  returning no exception or WrappedExceptionData instance.
         /// CallSlot is returned that can be queried for CallStatus, ResponseMsg and result.
         ///</summary>
         public CallSlot Async_GetDescriptor(@Agni.@Workers.@PID  @pid)
         {
            var request = new RequestAnyMsg(s_ts_CONTRACT, @s_ms_GetDescriptor_3, false, RemoteInstance, new object[]{@pid});
            return DispatchCall(request);
         }



         ///<summary>
         /// Synchronous invoker for  'Agni.Contracts.IProcessController.List'.
         /// This is a two-way call per contract specification, meaning - the server sends the result back either
         ///  returning '@System.@Collections.@Generic.@IEnumerable<@Agni.@Workers.@ProcessDescriptor>' or WrappedExceptionData instance.
         /// ClientCallException is thrown if the call could not be placed in the outgoing queue.
         /// RemoteException is thrown if the server generated exception during method execution.
         ///</summary>
         public @System.@Collections.@Generic.@IEnumerable<@Agni.@Workers.@ProcessDescriptor> @List(@System.@Int32  @processorID)
         {
            var call = Async_List(@processorID);
            return call.GetValue<@System.@Collections.@Generic.@IEnumerable<@Agni.@Workers.@ProcessDescriptor>>();
         }

         ///<summary>
         /// Asynchronous invoker for  'Agni.Contracts.IProcessController.List'.
         /// This is a two-way call per contract specification, meaning - the server sends the result back either
         ///  returning no exception or WrappedExceptionData instance.
         /// CallSlot is returned that can be queried for CallStatus, ResponseMsg and result.
         ///</summary>
         public CallSlot Async_List(@System.@Int32  @processorID)
         {
            var request = new RequestAnyMsg(s_ts_CONTRACT, @s_ms_List_4, false, RemoteInstance, new object[]{@processorID});
            return DispatchCall(request);
         }


  #endregion

  }//class
}//namespace
