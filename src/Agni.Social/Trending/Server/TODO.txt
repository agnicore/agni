Server/
 will contain the server implementation of the ITrendingSystem contract

 you can take the pattern from /Agni/WebMessaging/Server:


 +TrendingSystemServer  singleton glue trampoline that calls
 +TrendingSystemService : Service  (see how all of this is done in WebMessaging)

 TrendingSystemService is sealed, and coupled with ITrendingVolumeStore, the implementation of which is db-dependent.
 Use MongoDB
 Mongo-related implementation has to reside in /Agni/Providers/Agni.Social.MongoDB.dll (do not forget to set proper relative output directories)

 ATTENTION! The ITrendingSystem will work in a hostset containing more than 1 server.
 It is important to keep this in mind while coordinating the data purging between the volumes
 so multiple servers do not do the same job twice.


===================================================================

 Trending
Trending - is a few views/reports shown on a front page similar to Twitter.
Trending will be very easy to implement using Agni telemetry.
Trending will be implemented as a stand-alone application with its own datastore and interface the cluster components via Glue.

The trending engine/service is fed from all of the subscription events. Basically it is a telemetry store that records the COUNT: long per key.
The keys are the G_EMITTER and Dimensions supplied as laconic vector.

We harvest the telemetry in a hierarchical cluster akin to regular telemetry - saving the “trending” channel into a special data store using SocialTrendingGauge.
The data store is split in -sub-data stores each connected to a "volume" ("tom" po-russki).

class Volume: INamed, IOrdered.

Volumes have level of detail expressed as a date mask, and maximum age of data kept.
Every trending sample gets written into every volume, however the volume-dependent reduction (level of details) is performed by the date key
"YYYYMMDD HHF" - maximum
"YYYYMM" - minimum
F = 1/12 fraction of the hours (5 minute interval)
The date field is keps as date in MongoDB, the reduced date parts replaced by constants, for example:
  03/18/2018 2:34 am  ->  03/01/2018 1:00pm    reduced to YYYYMM
  03/18/2018 2:34 am  ->  03/18/2018 1:00pm    reduced to YYYYMMDD
  03/18/2018 2:34 am  ->  03/18/2018 2:00am    reduced to YYYYMMDD HH
  03/18/2018 2:34 am  ->  03/18/2018 2:30am    reduced to YYYYMMDD HH F


The table structure is modeled after the SocialTrendingGauge

table name: "entity"
  _id
  g_entity: gdid
  g_shard: gdid
  date: date  <---- the resolution of the date depends on volume, e.g all monthly reads will be YYYY/MM/01 1:00 PM etc...
  count: ulong

  dim1
  dim2
  ....
  dimX

The mapping of SoicalTrendingMessage.Dimensions -> "dim_*" columns is performed via IDimensionMapper - implementing class
(implemented in the PARTICULAR business system)

The service periodically scans all volumes and deletes old data from the database.

